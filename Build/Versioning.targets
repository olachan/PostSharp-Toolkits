<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">

	<PropertyGroup>
    <PostSharpToolkitsDirectory Condition="'$(PostSharpToolkitsDirectory)'==''">$(MSBuildThisFileDirectory)..</PostSharpToolkitsDirectory>
    <MSBuildCommunityTasksPath>.</MSBuildCommunityTasksPath>
    <MajorVersion>2.1</MajorVersion>
		<MinorVersion>1</MinorVersion>
  </PropertyGroup>
  
  <Import Project="..\Dependencies\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>

	<Target Name="GetRevisionNumber" Condition="'$(Revision)'==''" DependsOnTargets="GetSourceStatus">
    
    <ReadLinesFromFile File="$(PostSharpToolkitsDirectory)\#revision">
      <Output TaskParameter="Lines" PropertyName="Revision" />
    </ReadLinesFromFile>

    <Error Text="File $(PostSharpToolkitsDirectory)\#revision is empty." Condition="'$(Revision)'==''"/>

    <PropertyGroup>
      <Version>$(MajorVersion).$(MinorVersion).$(Revision)</Version>
    </PropertyGroup>
   
    <GitVersion Path="master">
      <Output TaskParameter="CommitCount" PropertyName="_SourceRevision" />
    </GitVersion>

    <Message Text="Version: $(Version); Build: $(Revision); Source Revision: $(_SourceRevision)" />

    <PropertyGroup Condition="'$(_SourceStatus)'==''">
      <ReleaseDir>$(PostSharpToolkitsDirectory)\Build\releases\v$(Version)-$(_SourceRevision)</ReleaseDir>
    </PropertyGroup>

    <PropertyGroup Condition="'$(_SourceStatus)'!=''">
      <ReleaseDir>$(PostSharpToolkitsDirectory)\Build\releases\v$(Version)-$(_SourceRevision)m</ReleaseDir>
    </PropertyGroup>

  </Target>
  
  <UsingTask TaskName="GitVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <LocalPath ParameterType="System.String" />
      <Path ParameterType="System.String" />
      <CommitCount ParameterType="System.Int32" Output="true" />
    </ParameterGroup>
    <Task>
      <!--<Reference Include="" />-->
      <Using Namespace="System"/>
      <Using Namespace="System.Diagnostics"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          LocalPath = LocalPath ?? ".";
          Path = Path ?? "master";
          
          Log.LogMessage(MessageImportance.Low, "LocalPath is {0}", LocalPath);
          Log.LogMessage(MessageImportance.Low, "Path is {0}", Path);
          
          var psi = new ProcessStartInfo("cmd", "/c git rev-list " + Path + " --count") {
              UseShellExecute = false, 
              ErrorDialog = false, 
              CreateNoWindow = false, 
              WorkingDirectory = LocalPath,
              RedirectStandardOutput = true,
              RedirectStandardError = true
          };

          string result;
          using (var p = Process.Start(psi)) {
            p.WaitForExit();
            if (p.ExitCode != 0) {
              using (var standardError = p.StandardError) {
                Log.LogError(standardError.ReadToEnd());
              }
              return false;
            }

            using (var standardOutput = p.StandardOutput) {
              CommitCount = Int32.Parse(standardOutput.ReadToEnd());
            }
          }
]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="GetSourceStatus">
    <Message Text="Toolkit directory: $(PostSharpToolkitsDirectory)" />
    <Exec Command="git status -s &gt; $(MSBuildProjectDirectory)\$(IntermediateDir)source-status" WorkingDirectory="$(PostSharpToolkitsDirectory)" />

    <ReadLinesFromFile File="$(IntermediateDir)\source-status">
      <Output TaskParameter="Lines" PropertyName="_SourceStatus"/>
    </ReadLinesFromFile>

    <Message Text="Source status:" Condition="'$(_SourceStatus.Trim())'!=''"/>
    <Message Text="$(_SourceStatus)" Condition="'$(_SourceStatus.Trim())'!=''"/>

  </Target>

  <Target Name="CreateBuild" DependsOnTargets="GetSourceStatus">

    <Error Text="Cannot create a build when the current working copy has pending changes." Condition="'$(_SourceStatus.Trim())'!=''"/>

    <MakeDir Directories="$(MSBuildProjectDirectory)\$(IntermediateDir)"/>

    <CreateBuild ProjectId="116" ReleaseName="$(MajorVersion)" MinorVersion="$(MinorVersion)">
      <Output TaskParameter="BuildNumber"  PropertyName="Revision"/>
    </CreateBuild>

    <PropertyGroup>
      <Version>$(MajorVersion).$(MinorVersion).$(Revision)</Version>
    </PropertyGroup>
   
    <WriteLinesToFile
      Overwrite="true"
      File="$(PostSharpToolkitsDirectory)\#revision"
      Lines="$(Revision)" />

    <CallTarget Targets="CreateVersionFiles" />
    <CallTarget Targets="CommitCreateBuild" />
    <CallTarget Targets="UpdateBuildRevision"/>
    
  </Target>

  <Target Name="CommitCreateBuild" DependsOnTargets="GetRevisionNumber">
    
    <!--
    <SvnCommit Message="Build $(Version)" Targets="$(PostSharpToolkitsDirectory)\#revision" />
    -->

    <!--
    <HgCommit LocalPath="$(PostSharpToolkitsDirectory)" Message="Build $(Version)" />
    <HgTag LocalPath="$(PostSharpToolkitsDirectory)" Message="Tagging changeset to build $(Version)" Tag="$(Version)"/>
    -->
  </Target>

  <Target Name="UpdateBuildRevision" DependsOnTargets="GetRevisionNumber">
    <GitVersion Path="master" LocalPath="$(PostSharpToolkitsDirectory)">
      <Output TaskParameter="CommitCount" PropertyName="_SourceRevision" />
    </GitVersion>

    <UpdateBuild ProjectId="116" BuildName="$(Version)" Revision="$(_SourceRevision)"/>
  </Target>

  <Target Name="CreateVersionFiles" DependsOnTargets="GetRevisionNumber">

    <Message Text="Creating version files. Version: $(Version); Revision: $(Revision)." />
    
    <PropertyGroup>
      <AssemblyVersionContent>
      <![CDATA[
[assembly: System.Reflection.AssemblyVersion( "$(MajorVersion).0.0" )]
#if !SMALL
[assembly: System.Reflection.AssemblyFileVersion( "$(Version)" )]
#endif
]]>
      </AssemblyVersionContent>
    </PropertyGroup>

    <ReadLinesFromFile File="$(PostSharpToolkitsDirectory)\AssemblyVersion.cs">
      <Output TaskParameter="Lines" PropertyName="_CurrentAssemblyVersionContent"/>
    </ReadLinesFromFile>

    <WriteLinesToFile
      Overwrite="true"
      File="$(PostSharpToolkitsDirectory)\AssemblyVersion.cs"
      Lines="$(AssemblyVersionContent)"
      Condition="'$(_CurrentAssemblyVersionContent)'!='$(AssemblyVersionContent)'"
      />

    <WriteLinesToFile
      Overwrite="true"
      File="$(PostSharpToolkitsDirectory)\PostSharpToolkits-$(MajorVersion).version"
      Lines="$(MajorVersion).$(MinorVersion).$(Revision)" />

  </Target>
</Project>
